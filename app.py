import os
import tempfile
from reportlab.lib.pagesizes import A4, A3, A2, A1, landscape, portrait
from reportlab.pdfgen import canvas
from reportlab.lib.units import mm
from PIL import Image
import streamlit as st

# ---------------- CONFIG ----------------
PAPER_SIZES = {"A1": A1, "A2": A2, "A3": A3, "A4": A4}

st.set_page_config(page_title="PDF Generator", page_icon="üßæ", layout="centered")

# ---------------- UI ----------------
st.markdown("<h2 style='text-align:center; color:#2196F3;'>üßæ PDF Generator</h2>", unsafe_allow_html=True)
st.write("")

paper_size = st.selectbox("Ch·ªçn kh·ªï gi·∫•y:", list(PAPER_SIZES.keys()), index=3)
orientation = st.radio("H∆∞·ªõng gi·∫•y:", ["D·ªçc (Portrait)", "Ngang (Landscape)"])
text_color = st.color_picker("M√†u ch·ªØ:", "#000000")
bg_color = st.color_picker("M√†u n·ªÅn:", "#FFFFFF")

input_text = st.text_area("Nh·∫≠p n·ªôi dung (m·ªói d√≤ng c√°ch nhau 20mm):", height=250)
uploaded_image = st.file_uploader("T√πy ch·ªçn: ch√®n ·∫£nh (PNG/JPG)", type=["png", "jpg", "jpeg"])

# ---------------- PROCESS ----------------
if st.button("üñ®Ô∏è Generate PDF"):
    if not input_text.strip():
        st.error("‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung tr∆∞·ªõc khi t·∫°o PDF.")
    else:
        # Ki·ªÉm tra d√≤ng qu√° d√†i
        lines = input_text.split("\n")
        long_lines = [line for line in lines if len(line) > 100]
        if long_lines:
            st.error("‚ùå M·ªôt s·ªë d√≤ng qu√° d√†i (>100 k√Ω t·ª±). H√£y xu·ªëng d√≤ng ho·∫∑c r√∫t ng·∫Øn l·∫°i.")
        else:
            # T·∫°o file t·∫°m
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
                pdf_path = tmp.name

            # C·∫•u h√¨nh PDF
            page_size = PAPER_SIZES[paper_size]
            if "Ngang" in orientation:
                page_size = landscape(page_size)
            else:
                page_size = portrait(page_size)

            c = canvas.Canvas(pdf_path, pagesize=page_size)
            width, height = page_size

            # C·∫•u h√¨nh l·ªÅ
            margin_left = 20 * mm
            margin_top = 20 * mm
            line_spacing = 20 * mm

            # V·∫Ω n·ªÅn
            c.setFillColor(bg_color)
            c.rect(0, 0, width, height, fill=True, stroke=False)

            # V·∫Ω ch·ªØ
            c.setFont("Helvetica", 12)
            c.setFillColor(text_color)

            y = height - margin_top  # D√≤ng ƒë·∫ßu ti√™n c√°ch m√©p tr√™n 20 mm

            for line in lines:
                if y < margin_top:
                    # Sang trang m·ªõi n·∫øu h·∫øt ch·ªó
                    c.showPage()
                    c.setFillColor(bg_color)
                    c.rect(0, 0, width, height, fill=True, stroke=False)
                    c.setFont("Helvetica", 12)
                    c.setFillColor(text_color)
                    y = height - margin_top

                c.drawString(margin_left, y, line)
                y -= line_spacing  # Gi·ªØ kho·∫£ng c√°ch d√≤ng ƒë·ªÅu 20 mm

            # V·∫Ω ƒë∆∞·ªùng ngang ch√≠nh gi·ªØa
            mid_y = height / 2
            c.setStrokeColor("#999999")
            c.setLineWidth(0.8)
            c.line(0, mid_y, width, mid_y)

            # Ch√®n ·∫£nh n·∫øu c√≥
            if uploaded_image:
                img = Image.open(uploaded_image)
                img_w, img_h = img.size
                aspect = img_h / img_w
                display_w = width / 3
                display_h = display_w * aspect
                img_x = width - display_w - 20 * mm
                img_y = 20 * mm
                temp_img = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
                img.save(temp_img.name)
                c.drawImage(temp_img.name, img_x, img_y, display_w, display_h)
                os.remove(temp_img.name)

            c.save()

            # Hi·ªÉn th·ªã n√∫t t·∫£i PDF
            st.success("‚úÖ PDF ƒë√£ t·∫°o th√†nh c√¥ng!")
            with open(pdf_path, "rb") as f:
                st.download_button("üíæ T·∫£i PDF", f, file_name="output.pdf", mime="application/pdf")
